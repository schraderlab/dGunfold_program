#####################################################################################################################################
#
#                                   libraries
#
#####################################################################################################################################
import pickle







#####################################################################################################################################
#
#                                   sys_argv files
#
#####################################################################################################################################








#####################################################################################################################################
#
#                                   step 1 - sequences, dot-bracket structure, dGmrna/dGref
#
#####################################################################################################################################
F = open ("2_sequences_vienna_output.txt")
f= F.readlines()

fields = []
dG_refs = []
sequences = []
dot_bracket_structures = []




for line in f:
    field = line.strip("\n").replace(" ( ", "space").replace(" (", "space").split("space") #-------------------since if the value is single digit, there is a space which may ruin the indexing. therefore first figure out a way to avoid that-------------
    fields.append(field)


for i in range(1, len(f), 2):
    dG_refs.append(fields[i][1].replace(")", ""))
    dot_bracket_structures.append(fields[i][0])



for i in range(0, len(f), 2):
    sequences.append(fields[i][0])







#####################################################################################################################################
#
#                                   step 2 - dGinit/dGconst
#
#####################################################################################################################################
F2 = open ("4_sequences_with_constraint_vienna_output.txt")
f2= F2.readlines()
# print(f2)
fields2 = []
dG_consts = []

for line in f2:
    field2 = line.strip("\n").replace(" ( ", "space").replace(" (", "space").split("space")
    fields2.append(field2)

# print(fields2)

for i in range(1, len(f2), 2):
    dG_consts.append(fields2[i][1].replace(")", ""))




#####################################################################################################################################
#
#                                   step 3 - dGunfold
#
#####################################################################################################################################
dG_unfolds = []
for i in range(0, len(dG_refs), 1):
    dG_unfolds.append(float(dG_consts[i])-float(dG_refs[i]))




#####################################################################################################################################
#
#                                   step 4 - constraints
#
#####################################################################################################################################
with open("constraints_file.pkl", "rb") as constraints_file:
    constraints = pickle.load(constraints_file)








#####################################################################################################################################
#
#                                   step 5 - final printing
#
#####################################################################################################################################
print('sequence', 'dot-bracket_structure', 'constrain', 'dGmRNA', 'dGinit', 'dGunfold', sep="\t")
for i in range(len(dG_unfolds)):
    print(sequences[i], dot_bracket_structures[i], constraints[i], round(float(dG_refs[i]), 2), round(float(dG_consts[i]), 2), round(float(dG_unfolds[i]), 2), sep="\t")












#####################################################################################################################################
#
#                                   end
#
#####################################################################################################################################
