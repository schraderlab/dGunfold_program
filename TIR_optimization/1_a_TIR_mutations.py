#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------libraries----------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
from itertools import repeat
from itertools import permutations
from itertools import combinations
import itertools
import sys
import pickle
import Bio.Data.CodonTable
from Bio.Data import CodonTable
from Bio.Seq import Seq
standard_table = CodonTable.unambiguous_dna_by_name["Standard"]
mito_table = CodonTable.unambiguous_dna_by_name["Vertebrate Mitochondrial"]
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------sys_argv----------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
sequence = sys.argv[1]
length = int(sys.argv[2])
mrna_length = int(sys.argv[3])

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
sequence_2 = sequence.upper()
sequence_2.replace("U", "T")

if len(sequence_2) <= mrna_length:
    coding_dna = Seq(sequence_2)
if len(sequence_2) > mrna_length:
    coding_dna = Seq(sequence_2[:mrna_length])
# print(coding_dna)
coding_dna_upto_specified = coding_dna[3:length*3]
# print(coding_dna_upto_specified)
messenger_rna = coding_dna_upto_specified.transcribe()
protein = coding_dna_upto_specified.translate(table="Bacterial")
# protein = coding_dna_upto_specified.translate(table="Bacterial", cds=True, to_stop=True)
# print(protein)


dict  = {'F': ['TTT', 'TTC'], 'L': ['TTA', 'TTG', 'CTT', 'CTC', 'CTA', 'CTG'], 'I': ['ATT', 'ATC', 'ATA'], 'M': ['ATG'], 'V': ['GTT', 'GTC', 'GTA', 'GTG'], 'S': ['TCT', 'TCC', 'TCA', 'TCG', 'AGT', 'AGC'], 'P': ['CCT', 'CCC', 'CCA', 'CCG'], 'T': ['ACT', 'ACC', 'ACA', 'ACG'], 'A': ['GCT', 'GCC', 'GCA', 'GCG'], 'Y': ['TAT', 'TAC'], 'H': ['CAT', 'CAC'], 'Q': ['CAA', 'CAG'], 'N': ['AAT', 'AAC'], 'K': ['AAA', 'AAG'], 'D': ['GAT', 'GAC'], 'E': ['GAA', 'GAG'], 'C': ['TGT', 'TGC'], 'W': ['TGG'], 'R': ['CGT', 'CGC', 'CGA', 'CGG', 'AGA', 'AGG'], 'G': ['GGT', 'GGC', 'GGA', 'GGG']}
# print(dict)

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# codons_for_dna_sequences = [[] for i in range(len(protein))]
codons_for_dna_sequences = []
for i,j in enumerate(protein):
    for x,y in dict.items():
        if j == x:
            # codons_for_dna_sequences[i].append(y)
            codons_for_dna_sequences.append(y)
# print(codons_for_dna_sequences)

len_protein = len(protein)
# print(len_protein)

join = [[] for i in range(len_protein)]
join[0] = codons_for_dna_sequences[0]
# print(join)

for i in range(len_protein-1):
    for j in range(len(join[i])):
        for k in range(len(codons_for_dna_sequences[i+1])):
            join[i+1].append(join[i][j]+codons_for_dna_sequences[i+1][k])
# print(join[-1])
# print(len(join[-1]))

TIRs = []
for i in range(len(join[-1])):
    TIRs.append(sequence_2[:3]+join[-1][i]+sequence_2[length*3:mrna_length])
# for i in range(len(TIRs)):
#     print(TIRs[i])
with open("TIRs_file.pkl", "wb") as TIRs_file:
    pickle.dump(TIRs, TIRs_file)


start_positions = [1 for i in range(len(join[-1]))]
# print(start_sites)
with open("start_positions_file.pkl", "wb") as start_positions_file:
    pickle.dump(start_positions, start_positions_file)





















#------------------------------------------end-------------------------------------------------------------------------------------
